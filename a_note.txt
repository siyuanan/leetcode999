314. tree vertical order traversal
BFS using q: popleft!!!! append children aftee processing node
DFS needs to use row and col to make sure nodes in order of up -> down, left -> right

# 227 calculators
class Solution:
    def calculate(self, s: str) -> int:
        if len(s) <= 0: 
            return 0
        i = 0
        cur = 0
        operation = '+'
        res = []
        # USE FOR LOOP!!!!!! NOT WHILE LOOP!!!!!
        # SO NO NEED TO WORRY ABOUT LAST POSITION
        for i in range(len(s)): 
            # update the current number
            if s[i] >= '0' and s[i] <= '9': 
                cur = cur * 10 + int(s[i])

            # meet non-digit
            # add current number to list based on operation
            # USE A LIST OF OPERATIONS SO NO NEED TO WORRY ABOUT WHITESPACE!!!!!
            # USE IF HERE NOT ELIF, IN CASE THE LAST CHAR IS A NUMBER
            if (s[i] in ['+', '-', '*', '/']) or (i == len(s)-1): 
                if operation == '+': 
                    res.append(cur)
                elif operation == '-': 
                    res.append(-cur)
                elif operation == '*': 
                    res.append(res.pop() * cur)
                else: 
                    res.append(int(res.pop() / cur))
                cur = 0
                operation = s[i]

        print(res)
        return sum(res)
        
        
        
# source: "facebook" target: "fee" -> 2
# source: "facebook" target: "BOO" -> 1
# source: "facebook" target: "coffee kebab" -> 3

dict_source = {}
dict_target = {}

for c in source.lower(): 
    if c in dict_source: 
        dict_source[c] += 1
    else: 
        dict_source[c] = 1

for c in target.lower(): 
    if c in dict_target: 
        dict_target[c] += 1
    else: 
        dict_target[c] = 1

cnt = 0
for c in dict_target.keys(): 
    if c not in dict_source: 
        return -1

    n1 = dict_source[c]
    n2 = dict_target[c] 
    n = 0
    if n2 % n1 == 0: 
        n = n2 // n1
    else: 
        n = n2 // n1 + 1
    cnt = max(cnt, n)

return cnt

source = 'abcd', dict_source = {'a': 1, 'b': 1, 'c': 1, 'd': 1}
target = 'aabbbf', dict_target = {'a': 2, 'b': 3, 'f': 1}


# [ 1, 0, 2, 0, 0, 3, 4 ] -> [ 1, 4, 3, 2, 0, 0, 0 ]
 
# nums: [ 1, 4, 2, 0, 0, 3, 0 ]
left = 0 # left = 2
right = len(nums) - 1 # right = 3
while left < right: # 0 < 6
    if nums[left] != 0: # nums[left] = 1
        left += 1
    if nums[right] == 0: 
        right -= 1
    if num[left] == 0 and nums[right] != 0: 
        tmp = nums[left]
        nums[left] = nums[right]
        nums[right] = tmp
        left += 1
        right -= 1



# 2. Add Two Numbers
# ALL LINKED LIST: REMEMBER TO MOVE FORWARD
def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
    dummy = ListNode(-1)
    over10 = 0
    cur = dummy
    while l1 != None or l2 != None or over10 > 0: 
        n = over10
        if l1 != None: 
            n += l1.val
            l1 = l1.next # MOVE
        if l2 != None: 
            n += l2.val
            l2 = l2.next # MOVE
        over10 = n // 10
        cur.next = ListNode(n % 10)
        cur = cur.next # MOVE
    return dummy.next
    
    
# 408. Valid Word Abbreviation
def validWordAbbreviation(self, word: str, abbr: str) -> bool:
    w = 0
    a = 0
    while w < len(word) and a < len(abbr): 
        # CHECK CHARS FIRST TO INCLUDE LEDING 0s
        if abbr[a] <= '0' or abbr[a] > '9': 
            if word[w] != abbr[a]: 
                return False
            a += 1
            w += 1
        else: 
            cnt = 0
            while a < len(abbr) and abbr[a] >= '0' and abbr[a] <= '9': 
                cnt = cnt * 10 + int(abbr[a])
                a += 1 # REMEMBER TO INCREASE A
            w += cnt 
        return w == len(word) and a == len(abbr) # NOT RETURN TRUE BUT RETURN W AND A EQUAL LENGTHS
